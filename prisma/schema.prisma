// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  firstname      String    @db.VarChar(50)
  lastname       String    @db.VarChar(50)
  email          String    @unique @db.VarChar(100)
  password       String    @db.VarChar(255)
  socket_id      String?    @db.VarChar(20)
  bio            String?   @db.Text
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  Post           Post[]
  Comment        Comment[]
  Like           Like[]

  friendshipsFrom Friendship[] @relation("FriendshipsFrom")

  friendshipsTo Friendship[] @relation("FriendshipsTo")

  messageFrom Message[] @relation("MessageFrom")

  messageTo    Message[]      @relation("MessageTo")
  Notification Notification[]
}

model Post {
  id        Int      @id @default(autoincrement())
  user_id   Int
  content   String   @db.Text
  media_url String?  @db.VarChar(255)
  timeStamp DateTime @default(now()) @map("time_stamp")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Comment Comment[]
  Like    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int
  content   String   @db.Text
  timeStamp DateTime @default(now()) @map("time_stamp")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  post_id   Int?     @map("post_id")
  user_id   Int      @map("user_id")
  timeStamp DateTime @default(now()) @map("time_stamp")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post Post? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Friendship {
  id        Int      @id @default(autoincrement())
  from_id   Int      @map("from_id")
  to_id     Int      @map("to_id")
  status    Int      @default(0)
  timeStamp DateTime @default(now()) @map("time_stamp")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  from User @relation("FriendshipsFrom", fields: [from_id], references: [id], onDelete: Cascade)
  to   User @relation("FriendshipsTo", fields: [to_id], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  from_id   Int
  to_Id     Int
  content   String
  isRead    Boolean @map("is_read")@default(false)
  timeStamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from User @relation("MessageFrom", fields: [from_id], references: [id])
  to   User @relation("MessageTo", fields: [to_Id], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar(50)
  timeStamp DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}
